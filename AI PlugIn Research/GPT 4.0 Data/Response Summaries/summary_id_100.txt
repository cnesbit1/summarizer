Original Response: 
To prove that a function (represented as a Turing Machine) is a reduction from language L to language Q, you typically follow these steps:

1.
Define the function: Clearly define the function that you're claiming to be a reduction from L to Q.
This function should take an input from language L and produce an output that belongs to language Q.
2.
Show that the function maps instances of L to instances of Q: Demonstrate that for any input instance x of language L, your function (Turing Machine) produces an output y that belongs to language Q.
This shows that the function maps instances of L to instances of Q.
3.
Prove correctness: Prove that the function is correct, meaning that it behaves as intended.
This typically involves providing a formal proof or argument showing that the output produced by your function for any given input instance x of L is indeed correct according to the definition of Q.
4.
Prove the reduction: Finally, prove that your function provides a reduction from L to Q.
This means demonstrating that:
   a.
If x is in L, then f(x) is in Q.
(Completeness)
   b.
If f(x) is in Q, then x is in L. (Soundness)

Completeness and soundness together demonstrate that your function serves as a valid reduction from L to Q.
It's important to note that depending on the specifics of L and Q, and the nature of your reduction function, the actual steps and the complexity of the proof may vary.
Additionally, rigor and clarity are essential in constructing such proofs.

Summary: 
This means demonstrating that:
   a.
If x is in L, then f(x) is in Q.

Original Response: 
Yes, you're correct.
In a multiplayer game where multiple players are interacting with the game board simultaneously, you typically want to maintain a centralized representation of the game state on the server, and this includes updating the board state in the database.
Here's how the process might work:

1.
**Client Move**: When a player makes a move on their client-side interface, they send a move request to the server via the WebSocket connection.
2.
**Server Validation**: The server receives the move request, validates it (e.g., checks if it's a legal move), and updates the game state accordingly.
3.
**Database Update**: After validating the move, the server updates the game board state in the database to reflect the new move.
This ensures that the game state is consistent and can be recovered in case of server restarts or other events.
4.
**Broadcast Update**: Once the database is updated, the server broadcasts the updated game state to all connected clients via the WebSocket connection.
5.
**Client Rendering**: Each client receives the updated game state from the server and renders it on the user interface, reflecting the latest moves made by all players.
By updating the game board state in the database, you ensure that the game state is consistent across all clients and persists even if the server goes down or restarts.
This allows players to resume the game from the last saved state.
Additionally, it provides a centralized source of truth for the game state, making it easier to implement features like replay functionality or game history.

Summary: 
This allows players to resume the game from the last saved state.
This ensures that the game state is consistent and can be recovered in case of server restarts or other events.
